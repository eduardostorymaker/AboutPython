############## definicion de una app desde python########
def run():
	pass


if __name__ == '__main__':
	run()

############################################################

numero1 = input("escribe un numero: ")
numero2 = input("escribe otro numero: ")

numero1 = int(numero1)
numero2 = int(numero2)

numero3 = numero1 + numero2

numero_decimal = 4.534
numero_decimal = round(numero_decimal,2)
numero_decimal = str(numero_decimal)
numero_decimal = float(numero_decimal)

nombre.upper()
nombre.capitalize()
nombre.lower()
nombre.replace('o','a')
nombre.strip()
nombre.strip("/n")
nombre[0]
nombre[2:5]
nombre[:5]
nombre[2:]
nombre[2:5:2] /pasos de 2 en dos
nombre[::] /de inicio a final
nombre[::-1] /pasos de -1 revierte el texto
len(nombre)
ingreso.isnumeric() /devuelve verdadero si el un numero

contador += 1

potencia -> **
% -> modulo

if condicion:
	sentencias
elif condicion:
	sentencias
else:
	sentencias

while condicion:
	sentencias

for contador in range(0,1000):
	print(contador)

for letra in nombre:
	print(letra)


break
continue

lista = [1,2,5,7]
lista.append(9) /agrega el 9 al final
lista.pop(2) /borra el objeto de posicion 2
lista[::-1] /concatena listas
lista*5 /multiplica la lista

tupla = (1,2,3,4,5) /es estatico, no se puede modificar

diccionario = {
	'llave1': 1,
	'llave2': 2,
	'llave3': 3,
}
diccionario['llave1']
diccionario['llave2']
diccionario['llave3']
diccionario.get('llave1')
diccionario.get('llave5','valor no determinado')

for llave in diccionario.keys():
	print(llave)

for valor in diccionario.values():
	print(valor)

for llave,valor in diccionario.items():
	print(llave)
	print(valor)

import random
numero = random.randint(1,50)
caracter = random.choice(listacaracteres)

listaatexto = "".join(listacaracteres)

MAYUS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'Ñ', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'X', 'Y', 'Z']
MINUS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'z']
NUMS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
CHARS = ['*', '+', '-', '/', '@', '_', '?', '!', '[', '{', '(', ')', '}', ']', ',', ';', '.', '>', '<', '~', '°', '^', '&', '$', '#', '"']




#######################
Intermedio
#######################

#abrir python con git bash
python -i
winpty python

#crear un entorno virtual, se creara una carpeta venv
py -m venv venv
#git
python -m venv venv

#activar el entorno virtual
.\venv\Scripts\activate
#git
cd env/Scripts
. activate

#desactivar el entorno virtual
deactivate

##############
#dependencias con pip
#instalar dependencias con el entorno virtual activado

#ver dependencias que tenemos instalada
pip freeze

#instalar pandas
pip install pandas

#crear un archivo requerimientos para compartir las dependencias a otra persona
#requirements.txt es como el package.json
pip freeze > requirements.txt

#si quieres instalar las dependencias
pop install -r requirements.txt

##############################
#Comprenhensions
###########################

#listas
# [element for element in iterable if condition]
[i**2 for i in range(1,101) if i%3 != 0]
#poner en lista los i al cuadrado de la iteracion de los i en el range(1,101) si cumplen la condicion que no son divisibles por tres
[i for i in range(1,100000) if i%4 == 0 and i%6 == 0 and i%9 ==0]
#multiplos de 4 que son de 6 y de 9 hasta 5 digitos

#diccionarios
#{key: value for value in iterable if condition}
{i:i**2 for i in range(1,101) if i%3 != 0}
#poner en diccionario los i al cuadrado de la iteracion de los i en el range(1,101) si cumplen la condicion que no son divisibles por tres
{i:i**(1/2) for i in range(1,1001) if True}
{i:i**(1/2) for i in range(1,1001)}
#llaves 1000 primeros numeros y valor la raiz cuadrada


##############################
#Lambda (funciones anonimas)
###########################
#solo puede tener una linea de codigo
#identificador = lambda argumentos: sentenciaaretornar
palindromo = lambda cadena: cadena == cadena[::-1]
print(palindromo('ana'))
#verificando si es un palindromo

##############################
#funciones de orden superior (funciones como argumento)
###########################
#filter
#filter(functioncondition,list)
lista = [1,2,3,4,5,6]
list(filter(lambda num:num%2=0,lista))
#filter filtra los numeros pares, pero list los guarda en una lista

#map
#map(functioncondition,list)
lista = [1,2,3,4,5,6]
list(map(lambda num:num**2,lista))
#map modifica los numeros, al cuadrado, pero list los guarda en una lista

#reduce
#reduce(functioncondition,list)
from functools import reduce
lista = [1,2,3,4,5,6]
reduce(lambda a,b:a*b,lista)
#Reduce ejecuta la sentencia en cada iteracion, en este caso ultiplica toda la lista
#a guarda el resultado anterior acumulado


##############################
#Errores
###########################
###try/except/raise/finally

try:
	print(palindromo(1))
except TypeError:
	print("Solo se puede ingresar strings")

try:
	if len(cadena) == 0:
		raise ValueError("no se puede ingresar cadenas vacias")
	return string == string[::-1]
except ValueError as ve:
	print(ve)
	return false
	
try:
	f = open("archivo.txt")
finally:
	f.close()

###assert (afirmaciones)
#manera mas simple, el codigo se sigue ejecutando si la condicion es verdadera sino devuelve el mensaje como error

def palindromo(cadena):
	assert len(cadena)>0, "no se puede ingresar una cadena vacia"
	return cadena == cadena[::-1]

print palindromo("")

##############################
#Archivos
###########################

#R(lectura ) W(sobreescritura) A(escritura adiciona al final)

#leer lista de numeros
numbers = []
with open("./ruta/del/archivo.txt, "r") as f:
	for line in f:
		numbers.append(int(line))
	print(numbers)

#crear un archivo con una lista de nombre
names =  ["facundo","eduardo","luis","pepe","rocío"]
with open("./ruta/del/archivo.txt, "w", encoding ="utf-8") as f:
	for name in names:
		f.write(name)
		f.write("\n")


##############################
#Enumerate
###########################
#crea una numeracion consecutiva sobre una lista
lista=["a","b","c","d"]
list(enumerate(lista,100))
#[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]

#se puede indicar el numero de inicio
list(enumerate(lista,100))
#[(100, 'a'), (101, 'b'), (102, 'c'), (103, 'd')]

##############################
#Limpiar pantalla
###########################
#windows
os.system("cls")
#unix
os.system("clear")


