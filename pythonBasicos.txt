############## definicion de una app desde python########
def run():
	pass


if __name__ == '__main__':
	run()

############################################################

numero1 = input("escribe un numero: ")
numero2 = input("escribe otro numero: ")

numero1 = int(numero1)
numero2 = int(numero2)

numero3 = numero1 + numero2

numero_decimal = 4.534
numero_decimal = round(numero_decimal,2)
numero_decimal = str(numero_decimal)
numero_decimal = float(numero_decimal)

del variable /borra la variable

nombre.upper()
nombre.capitalize()
nombre.lower()
nombre.replace('o','a')
nombre.strip()
nombre.strip("/n")
nombre[0]
nombre[2:5]
nombre[1:-1] /menos uno atras y menos unp adelante
nombre[:5]
nombre[2:]
nombre[2:5:2] /pasos de 2 en dos
nombre[::] /de inicio a final
nombre[::-1] /pasos de -1 revierte el texto
len(nombre)
ingreso.isnumeric() /devuelve verdadero si el un numero

"Numbers: {0} {1} {2}". format(5, 7, 9) /Numbers: 5 7 9
"Numbers: {x} {y} {z}". format(x=5, y=7, z=9) /Numbers: 5 7 9

texto = ", ".join(["uno","dos","tres"]) / uno, dos, tres
texto.split(", ") = ["uno","dos","tres"]

cadena = "texto largo"
"texto" in cadena /True
f'cadena de texto {variable}'

------------------------------
operadores
------------------------------
suma
+
resta
-
multiplicacion
*
divison
/
modulo
%
division entero
//
potencia
**
comparacion
==
Logicos
y
and
o
or
negacion
not
----
objetos
is

---------------
incrementales
---------------
count += 1 

--------------------------
detener y pasar
-------------------------
break
continue

type(variable) /tipo de variable
id(variable) /direccion en memoria
iter(variable) /vuelve a una variable en un iterador

frutas = ['manzana','pera','mango']
iterador = iter(frutas)
next(iterador)
#manzana
next(iterador)
#pera
next(iterador)
#mango
next(iterador)
#stop iteration

contador += 1

potencia -> **
% -> modulo

if condicion:
	sentencias
elif condicion:
	sentencias
else:
	sentencias

while condicion:
	sentencias
	
/////Rangos
/range(inicio,fin,pasos) el fin no es inclusivo, empieza del cero hasta el fin -1
list(Range(5)) /[0,1,2,3,4]
list(Range(1,5)) /[1,2,3,4]
list(Range(1,5,2)) /[1,3]
list(Range(7,3,-1)) /[7,6,5,4]

for contador in range(0,1000):
	print(contador)

for letra in nombre:
	print(letra)


break
continue

///////listas
lista = [1,2,5,7]
5 in lista /true
lista.append(9) /agrega el 9 al final
lista.pop(2) /borra el objeto de posicion 2
lista.pop() /borra el ultimo numero
lista.insert(0,9) /inserta 9 en la posicion 9
lista.index(2) /devuelve el indice del primer valor 2 -> 1 
lista[::-1] /concatena listas
lista*5 /multiplica la lista
max(lista) /devuelve el mayor valor -> 7
min(lista) /devuelve el menor valor -> 1
lista.count(5) /cuenta cuantas veces se repite el valor 5
lista.remove(7) /remueve el primer item que encuentra con ese valor
lista.reverse() /invierte el orden de la lista
----
lista.clear()
lista.sort()
lista.sort(revere =true)
----

a = [1,2,3]
b = a /en este caso asigna la misma posicion de memoria a is b true, si modificas uno, se modificara el otro, no se deben igualar listas se debe de clonar
b = list(a) /ahora son distintos objetos, tienen distintas direcciones de memoria

///////tuplas
tupla = (1,2,3,4,5) /es estatico, no se puede modificar
tupla2 = "uno", "dos", "tres"
/desempaquetar valores
a,b,c = tupla2 / a="uno", b="dos", c="tres"
a,b,*c,d = [1,2,3,4,5,6,7,8,9] / a=1, b=2, c=[3, 4, 5, 6, 7, 8], d=9
tupla = (1,) / si se ingresa integer = (1), resulta un integer, la tupla debe de tener comas (tupla de un valor)

///////sets
//no tiene valores repetidos y son inmutables
miset = {1,1,1,1,1,1,1,2,3,4,5,5,5,5,5,5} /{1, 2, 3, 4, 5}
3 in miset / true
/añadir 1 elemento
miset.add(6) /{1, 2, 3, 4, 5, 6}
/eliminar un elemento existente, si no esta en la lista envia error
miset.remove(2) //{1, 3, 4, 5, 6}
/eliminar un elemento inexistente, si esta en la lista, lo borra, si no esta, devuelve el mismo set
miset.discard(2) 
/elimina un elemento aleatorio
miset.pop()
/borra todo el set
miset.clear()

/añadir multiples elementos
miset.update([1,2,3])
miset.update((1,2,3),{4,5})

/para crear un set vacio se debe de utilizar un constructor, {}, esto crea un diccionario vacio
miset = set()

uno = {1,2,3,4,5,6}
dos = {4,5,6,7,8,9}
print(uno|dos) /{1, 2, 3, 4, 5, 6, 7, 8, 9}
print(uno&dos) /{4, 5, 6}
print(uno-dos) /{1, 2, 3}
print(dos-uno) /{8, 9, 7}
print(dos^uno) /{1, 2, 3, 7, 8, 9}

//otra opcion
set1.union(set2)
set1.symmetric_difference(set2)
set1.difference(set2)
set1.intersection(set2)

/para convertir una lista en set
miset = set(lista)
/convertir tupla en set
miset = set(tupla)

///////diccionarios
diccionario = {
	'llave1': 1,
	'llave2': 2,
	'llave3': 3,
}
//agregar datos
diccionario['llave4'] = 4
//consultas
diccionario['llave1']
diccionario['llave2']
diccionario['llave3']
diccionario.get('llave1')
diccionario.get('llave5','valor no determinado')
del diccionario['llave1']
'llave1' in diccionario /false
'llave2' in diccionario /true

for llave in diccionario.keys():
	print(llave)

for valor in diccionario.values():
	print(valor)

for llave,valor in diccionario.items():
	print(llave)
	print(valor)

import random
numero = random.randint(1,50)
caracter = random.choice(listacaracteres)

listaatexto = "".join(listacaracteres)

MAYUS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'Ñ', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'X', 'Y', 'Z']
MINUS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'z']
NUMS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
CHARS = ['*', '+', '-', '/', '@', '_', '?', '!', '[', '{', '(', ')', '}', ']', ',', ';', '.', '>', '<', '~', '°', '^', '&', '$', '#', '"']




#######################
Intermedio
#######################

#abrir python con git bash
python -i
winpty python

#crear un entorno virtual, se creara una carpeta venv
py -m venv venv
#git
python -m venv venv

#activar el entorno virtual
.\venv\Scripts\activate
#git
cd env/Scripts
. activate

#desactivar el entorno virtual
deactivate

##############
#dependencias con pip
#instalar dependencias con el entorno virtual activado

#ver dependencias que tenemos instalada
pip freeze

#instalar pandas
pip install pandas

#crear un archivo requerimientos para compartir las dependencias a otra persona
#requirements.txt es como el package.json
pip freeze > requirements.txt

#si quieres instalar las dependencias
pop install -r requirements.txt

##############################
#Comprenhensions
###########################

#listas
# [element for element in iterable if condition]
[i**2 for i in range(1,101) if i%3 != 0]
#poner en lista los i al cuadrado de la iteracion de los i en el range(1,101) si cumplen la condicion que no son divisibles por tres
[i for i in range(1,100000) if i%4 == 0 and i%6 == 0 and i%9 ==0]
#multiplos de 4 que son de 6 y de 9 hasta 5 digitos

#diccionarios
#{key: value for value in iterable if condition}
{i:i**2 for i in range(1,101) if i%3 != 0}
#poner en diccionario los i al cuadrado de la iteracion de los i en el range(1,101) si cumplen la condicion que no son divisibles por tres
{i:i**(1/2) for i in range(1,1001) if True}
{i:i**(1/2) for i in range(1,1001)}
#llaves 1000 primeros numeros y valor la raiz cuadrada


##############################
#Lambda (funciones anonimas)
###########################
#solo puede tener una linea de codigo
#identificador = lambda argumentos: sentenciaaretornar
palindromo = lambda cadena: cadena == cadena[::-1]
print(palindromo('ana'))
#verificando si es un palindromo
#asigando el lambda ejecutado con un valor(6) y devolviendo el cuadrado a una variable
a = (lambda x: x**2)(6)

##############################
#funciones de orden superior (funciones como argumento)
###########################
#filter
#filter(functioncondition,list)
lista = [1,2,3,4,5,6]
list(filter(lambda num:num%2=0,lista))
#filter filtra los numeros pares, pero list los guarda en una lista

#map
#map(functioncondition,list)
lista = [1,2,3,4,5,6]
list(map(lambda num:num**2,lista))
#map modifica los numeros, al cuadrado, pero list los guarda en una lista

#reduce
#reduce(functioncondition,list)
from functools import reduce
lista = [1,2,3,4,5,6]
reduce(lambda a,b:a*b,lista)
#Reduce ejecuta la sentencia en cada iteracion, en este caso ultiplica toda la lista
#a guarda el resultado anterior acumulado


##############################
#Errores y excepciones
###########################
###try/except/raise/finally

try:
	print(palindromo(1))
except TypeError:
	print("Solo se puede ingresar strings")

try:
	if len(cadena) == 0:
		raise ValueError("no se puede ingresar cadenas vacias")
	return string == string[::-1]
except ValueError as ve:
	print(ve)
	return false
	
try:
	f = open("archivo.txt")
finally:
	f.close()

###assert (afirmaciones)
#manera mas simple, el codigo se sigue ejecutando si la condicion es verdadera sino devuelve el mensaje como error

def palindromo(cadena):
	assert len(cadena)>0, "no se puede ingresar una cadena vacia"
	return cadena == cadena[::-1]

print palindromo("")

##############################
#Archivos
###########################

#R(lectura ) W(sobreescritura) A(escritura adiciona al final)

#leer lista de numeros
numbers = []
with open("./ruta/del/archivo.txt, "r") as f:
	for line in f:
		numbers.append(int(line))
	print(numbers)

#crear un archivo con una lista de nombre
names =  ["facundo","eduardo","luis","pepe","rocío"]
with open("./ruta/del/archivo.txt, "w", encoding ="utf-8") as f:
	for name in names:
		f.write(name)
		f.write("\n")

#Excepciones
#ImportError: an import fails;
#IndexError: a list is indexed with an out-of-range number;
#NameError: an unknown variable is used;
#SyntaxError: the code can't be parsed properly;
#TypeError: a function is called on a value of an inappropriate type;
#ValueError: a function is called on a value of the correct type, but with an inappropriate value.


##############################
#Enumerate
###########################
#crea una numeracion consecutiva sobre una lista
lista=["a","b","c","d"]
list(enumerate(lista,100))
#[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]

#se puede indicar el numero de inicio
list(enumerate(lista,100))
#[(100, 'a'), (101, 'b'), (102, 'c'), (103, 'd')]

##############################
#Limpiar pantalla
###########################
#windows
os.system("cls")
#unix
os.system("clear")

##############################
#Generators
###########################

def countdown():
    i=5
    while i>0:
        yield i
        i -=1

for i in countdown():
    print(i)
    
#imprime del 5 al 1
#yield se utiza como generador reemplaza al return por una funcion


def my_gen():

  """un ejemplo de generadores"""

  print('Hello world!')
  n = 0
  yield n # es exactamente lo mismo que return pero detiene la función, cuando se vuelva a llamar a la función, seguirá desde donde se quedó

  print('Hello heaven!')
  n = 1
  yield n

  print('Hello hell!')
  n = 2
  yield n


a = my_gen()
print(next(a)) # Hello world!
print(next(a)) # Hello heaven!
print(next(a)) # Hello hell!
print(next(a)) StopIteration

########Generator expresions
lista = [0,1,2,3,4,5]

lista_comprensiones = [x*2 for x in lista]
generador_comprensiones = (x*2 for x in lista)

#la diferencia entre los dos es que un generador es un iterador, y los iteradores extraen los datos uno a la vez
#las listas almacenan todos los datos


########Fibonacci Generator, es la manera mas facil de crear un iterador, ver fibonacci iterator
import time

def FibonacciGenerator(max = None):
    n1 = 0
    n2 = 1
    counter = 0

    while True:
        if counter <= max-1 and max > 0:
            if counter == 0:
                counter += 1
                yield n1
            elif counter == 1:
                counter += 1
                yield n2
            else:
                aux = n1 + n2
                counter += 1
                n1,n2 = n2,aux
                yield aux
        else:
            raise StopIteration

fibonacci = FibonacciGenerator(10)

for element in fibonacci:
    print(element)
    #time.sleep(1)

##############################
#Decorators
###########################
#pasar y devolver funciones entre codigos

def decor(func):
    def wrap():
        print("==============")
        func()
        print("==============")
    return wrap

def print_text():
    print("Hola Mundo")
decorated = decor(print_text)

#el bloque anterior se puede reemplazar por el siguiente, auq aun no se como ejecutarlo
#@decor
#def print_text():
#    print("Hola Mundo")


#Devuelve
#==============
#Hola Mundo
#==============


##############################
#*args, **Kwargs
###########################
def alotofarguments(argument1,*theotherones):
    print(argument1)
    print(theotherones)

alotofarguments(1,2,3,4,5,6,7,8)
#1
#(2,3,4,5,6,7,8)
#la segunda variable devuelve una tupla

#####
def alotofarguments(x,y=7,*args, **Kwargs):
    #y toma el valor por defecto de 7 si no encuentra valor de ingreso
    print(Kwargs)
    print(args)
    print(x)
    print(y)

alotofarguments(2,3,4,5,6,a=7,b=8)

#{'a': 7, 'b': 8}
#(4, 5, 6)
#2
#3




##############################
#tests
###########################

##Caja Negra

import unittest

def suma(num1, num2):
    return num1 + num2

class CajaNegraTest(unittest.TestCase):
    def test_suma_dos_positivos(self):
        num_1 = 10
        num_2 = 5

        resultado = suma(num_1, num_2)

        self.assertEqual(resultado, 15)
        self.assertGreater(resultado, 14)
        self.assertGreaterEqual(resultado, 15)
        self.assertLess(resultado, 16)
        self.assertLessEqual(resultado, 15)
    
    def test_suma_dos_negativos(self):
        num_1 = -10
        num_2 = -7

        resultado = suma(num_1, num_2)

        self.assertEqual(resultado, -17)
    

if __name__ == '__main__':
    unittest.main()


##Caja Cristal

import unittest


def mayor_edad(edad):
    if edad >= 18:
        return True
    else:
        return False


class PruebaDeCristalTest(unittest.TestCase):
    
    def es_mayor(self):
        edad = 15
        result = mayor_edad(edad)

        self.assertEqual(result, True)

    def es_menor(self):
        edad = 100
        result = mayor_edad(edad)

        self.assertEqual(result, False)


if __name__ == '__main__':
    unittest.main()



###########################
#Tipado estatico
######################
#desde py 3.6, pero aun no devuelve error
#para que devuelva error utilizar el modulo mypy -> pip install mypy -> ejecutar -> py archivo.py --check-untyped-defs
a: int = 5
b: str = 'hola'
c: bool = True

def suma(a:int,b:int) -> int:
	return a+b


#desde py 3.9
from typing import Dict, List, Tuple

positives: list[int] = [1,2,3,4,5]

users: Dict[str,int] = {
	'argentina': 1,
	'mexico': 2
}

countries: List[Dict[str,str]] = [
	{
		'name': 'argentina'
		'people': '450000'
	},
	{
		'name': 'colombia'
		'people': '900000'
	}
]

numbers: Tuple[int,float,int] = (1,0.5,1)


CoordinatesType: List[Dict[str,Tuple[int,int]]]

coodinates: CoordinatesType = [
	{
		'coord1': (1,2),
		'coord1': (3,5)
	}
	{
		'coord1': (0,3),
		'coord1': (1,2)
	}
] 

###########################
#Closure
######################
#debemos tener una nested function
#la nested function debe referenciar un valor de un scope superior
#la función que envuelve la nested debe retornarla también

def make_multiplier(x):
	
	def multiplier(n):
		return n*x

	return multiplier

times10 = multiplier(10)
times4 = multiplier(4)

print(times10(3))
print(times4(5))
print(times10(times4(2)))

###########################
#Decoradores
######################

def decorador(func):
    def envoltura():
        print("Esto se añade a mi función original.")
        func()
    return envoltura

def saludo():
    print("¡Hola!")

saludo()
# Salida:
# ¡Hola!

saludo = decorador(saludo) # Se guarda la función decorada en la variable saludo
saludo()                   # La función saludo está ahora decorada
# Salida:
# Esto se añade a mi función original.
# ¡Hola!

##########################
##sugar sintaxis
def decorador(func):
    def envoltura():
        print("Esto se añade a mi función original.")
        func()
    return envoltura

@decorador
def saludo():
    print("¡Hola!")

saludo()
# Salida:
# Esto se añade a mi función original.
# ¡Hola!

##ejemplo

def mayusculas(func):
	def envoltura(texto):
		return func(texto).upper()
	return envoltura

@mayusculas
def mensaje(nombre):
	return f'{nombre}, recibiste un mensaje'

print(mensaje('Cesar'))

#CESAR, RECIBISTE UN MENSAJE


###Tiempo de ejecucion

from datetime import datetime

def execution_time(func):
	df wrapper(*args,**kwargs):
		initial_time = datetime.now()
		func(*args,**kwargs)
		final_time = datetime.now()
		time_elapsed = final_time - initial_time
		print("Pasaron "+str(time_elapsed.total_seconds())+" segundos")
	return wrapper

@execution_time
def random_func():
	for _ in range(1,100000)
		pass

@execution_time
def suma(a: int,b: int) -> int:
	return a + b

random_func()
suma(a+b)

####### si se le pasa un parametro al decorador

def with_custom_message(message):
    def with_message(function):
        print(f"{message}:")
        def wrapper(*args,**kwargs):
            function(*args,**kwargs)
        return wrapper
    return with_message

@with_custom_message("Hello")
def multiply(a,b):
    c=a*b
    print(f"The result of {a} * {b} is {c}")

multiply(10,2)


			
####################
###Fechas - modulo datetime
##########

import datetime

#hora universal en utc si no esta configurada en tu pc sino devuelve el de la pc
my_time = datetime.datetime.now()
#fecha de ahora
my_day = datetime.date.today()
my_day.year
my_day.month
my_day.day

#formatos
#%Y year %m Month %d Day %H hour %M Minute %S Second

from datetime import datetime

my_datetime = datetime.now()

my_str = my_datetime.strftime('%d/%m/%Y')
print(f'Formato LATM: {my_str}')
my_str = my_datetime.strftime('%m/%d/%Y')
print(f'Formato USA: {my_str}')
my_str = my_datetime.strftime('Estamos en el año %Y')
print(f'Formato Random: {my_str}')



#######zonas horarias
########instalar pytz
#pip install pytz

from datetime from datetime
import pytz

bogota_timezone = pytz.timezone("America/Bogota")
bogota_date = datetime.now(bogota_timezone)
print("Bogota: ", bogota_date.strftime("%d/%m/%y, %H:%M%S"))