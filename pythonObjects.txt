################
#Object
###############

#Class
#constructor __init__ (metodo)
#metodo aranar
#siempre se define con self como parametro, pero cuando se llama, no se nombra.

class Cat:
	def __init__(self,color,legs):
		self.color = color
		self.legs = legs

	def arnar(self):
		print("au!")

felix = Cat("ginger",4)

#herencia (inheritance), una superclase que herede sus caracteristicas a las subclasse
#con super() se puede llamar un llamar un metodo de la superclase

class Animal:
	def __init__(self,name,color):
		self.name = name
		self.color = color
	def hide(self):
		print("where is it...")

class Cat(Animal):
	def purr(self):
		print("Purr...")

class Dog(Animal):
	def bark(self):
		print("Woof...")
	def hide(self):
		super().hide()
		print("i see you...")

#metodos magicos o dunders (__value__)
#metodo magico para crear una instancia __init__
#ejemplo de metodo magico __add__, que puede ser llamado con el +

class Vector2D:
     def __init__(self,x,y):
             self.x=x
             self.y=y
     def __add__(self,other):
             return Vector2D(self.x+other.x,self.y+other.y)

first = Vector2D(5,7)
second=Vector2D(3,9)
result = first + second
print(result.x) / 8
print(result.y) / 16

#otros metodos magicos -> x+y es igual a x.__add__(y) 
#si el metoro magico no esta miplementado en x entonces x+y es igual a y.__add__(x)
#__sub__ for -
#__mul__ for *
#__truediv__ for /
#__floordiv__ for //
#__mod__ for %
#__pow__ for **
#__and__ for &
#__xor__ for ^
#__or__ for |


class SpecialString:
	def __init__(self, cont):
		self.cont = cont
	def __truediv__(self,other):
		line = "="*len(other.cont)
		return "\n".join([self.cont,line,other.cont])

spam = SpecialString("spam")
hello = SpecialString("Hello world!")
print(spam/hello)

#imprime lo siguiente:
#spam
#============
#Hello world!

#otros de python
__lt__ for <
__le__ for <=
__eq__ for ==
__ne__ for !=
__gt__ for >
__ge__ for >=
#If __ne__ is not implemented, it returns the opposite of __eq__.

class SpecialString:
	def __init__(self, cont):
		self.cont = cont
	def __gt__(self,other):
		for index in range(len(other.cont)+1):
			result = other.cont[:index] + ">" + self.cont
			result += ">" + other.cont[index:]
			print(result)

spam = SpecialString("spam")
eggs = SpecialString("eggs")
spam>eggs

#otros como funciones:
#__len__ for len()
#__getitem__ for indexing
#__setitem__ for assigning to indexed values (x[y]=z)(x.__setitem__(y,z))
#__delitem__ for deleting indexed values
#__iter__ for iteration over objects (e.g., in for loops)
#__contains__ for in
#__call__ for calling objects as functions
#__int__, __str__, and the like, for converting objects to built-in types


##Data hiding
##en python no se tiene encapsulacion, solo se oculta y puede ser accedido por el _ delante del metodo o atributo
#The __repr__ magic method is used for string representation of the instance.

class Queue:
	def __init__(self,contents):
		self._hiddenlist = list(contents)

	def push(self,value):
		self._hiddenlist.insert(0,value)

	def pop(self):
		return self._hiddenlist.pop(-1)

	def __repr__(self):
		return "Queue({})".format(self._hiddenlist)

queue = Queue([1,2,3])
print(queue)
queue.push(0)
print(queue)
queue.pop()
print(queue)
print(queue._hiddenlist)

##fuertemente privados, se utiliza doble guion bajo

class Spam:
    __egg = 7
    def print_egg(self):
        print(self.__egg)

s = Spam()
s.print_egg()
print(s._Spam__egg)
print(s.__egg)

#Resultado
#7
#7
#Traceback (most recent call last):
#  File "D:\EEspinoza\practica.py", line 9, in <module>
#    print(s.__egg)
#AttributeError: 'Spam' object has no attribute '__egg'

#####Metodos de clase

class Rectangle:
    def __init__(self, width, height):
        self.widht = width
        self.height = height
    
    def calculate_area(self):
        return self.widht*self.height

    @classmethod
    def new_square(cls, side_lenght):
        return cls(side_lenght,side_lenght)

square = Rectangle.new_square(5)
print(square.calculate_area())

#####Metodos estaticos

class Pizza:
    def __init__(self,toppings):
        self.toppings = toppings

    @staticmethod
    def validate_topping(topping):
        if topping=="pineapple":
            raise ValueError("No pineapples!")
        else:
            return True

ingredients = ["cheese","onions","spam","pineapple"]
if all(Pizza.validate_topping(i) for i in ingredients):
        pizaa= Pizza(ingredients)

#ValueError: No pineapples!

##### Propiedades (properties)

class Pizza:
    def __init__(self, toppings):
        self.toppings = toppings

    @property
    def pineapple_allowed(self):
        return False

pizza = Pizza(["cheese","tomato"])
print(pizza.pineapple_allowed)
pizza.pineapple_allowed = True

# False
# Traceback (most recent call last):
#   File "D:\EEspinoza\practica.py", line 11, in <module>
#     pizza.pineapple_allowed = True
# AttributeError: can't set attribute 'pineapple_allowed'



# # # # # # # # # # # # setter and getter
# Properties can also be set by defining setter/getter functions.
# The setter function sets the corresponding property's value.
# The getter gets the value.
# To define a setter, you need to use a decorator of the same name as the property, followed by a dot and the setter keyword.
# The same applies to defining getter functions.

class Pizza:
    def __init__(self, toppings):
        self.toppings = toppings
        self._pineapple_allowed = False

    @property
    def pineapple_allowed(self):
        return self._pineapple_allowed

    @pineapple_allowed.setter
    def pineapple_allowed(self,value):
        if value:
            password = input("Enter the password 1234: ")
            if password == "1234":
                self._pineapple_allowed = value
            else:
                raise ValueError("Alert! Intruder!")

pizza = Pizza(["cheese","tomato"])
print(pizza.pineapple_allowed)
pizza.pineapple_allowed = True
print(pizza.pineapple_allowed)

#False
#Enter the password 1234: 1234
#True


#######Ejemplo juego
class Enemy:
  name = ""
  lives = 0
  def __init__(self, name, lives):
    self.name = name
    self.lives = lives

  def hit(self):
    self.lives -= 1
    if self.lives <= 0:
       print(self.name + ' killed')
    else:
        print(self.name + ' has '+ str(self.lives) + ' lives')

class Monster(Enemy):
  def __init__(self):
    super().__init__('Monster', 3)

class Alien(Enemy):
  def __init__(self):
    super().__init__('Alien', 5)


m = Monster()
a = Alien()

while True:
    x = input()
    if x == 'exit':
        break
    elif x == 'laser':
      a.hit()
    elif x=='gun':
      m.hit()


##################################
######################
###Iteradores propios
###############
###################################
##debe de tener definido los metodos __iter__ y __next__, para finalizar la iteracion se debe de enviar raise StopIteration

import time

class FiboIter():

    def __init__(self,max = 0):
        self.max = max 

    def __iter__(self):
        self.n1 = 0
        self.n2 = 1
        self.counter = 0
        return self

    def __next__(self):
        if (not self.max or self.counter <= self.max-1) and self.max > 0:
            if self.counter == 0:
                self.counter += 1
                return self.n1
            elif self.counter == 1:
                self.counter += 1
                return self.n2
            else:
                self.counter += 1
                self.aux = self.n1 + self.n2
                self.n1, self.n2 = self.n2, self.aux
                return self.aux
        else:
            raise StopIteration

class EvenNumbers:

    def __init__(self,max=None):
        self.max = max
    
    def __iter__(self):
        self.num = 0
        self.count = 0
        return self

    def __next__(self):
        if (not self.max or self.count <= self.max-1)and self.max>0:
            result = self.num
            self.num += 2
            self.count += 1
            return result
        else:
            raise StopIteration
        


if __name__ == "__main__":
    fibonacci = FiboIter(5)

    for element in fibonacci:
             print(element)

        #time.sleep(1)
        
    # pares = EvenNumbers(0)
    # for par in pares:
    #     print(par)