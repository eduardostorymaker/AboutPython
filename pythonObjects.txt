################
#Object
###############

#Class
#constructor __init__ (metodo)
#metodo aranar
#siempre se define con self como parametro, pero cuando se llama, no se nombra.

class Cat:
	def __init__(self,color,legs):
		self.color = color
		self.legs = legs

	def arnar(self):
		print("au!")

felix = Cat("ginger",4)

#herencia (inheritance), una superclase que herede sus caracteristicas a las subclasse
#con super() se puede llamar un llamar un metodo de la superclase

class Animal:
	def __init__(self,name,color):
		self.name = name
		self.color = color
	def hide(self):
		print("where is it...")

class Cat(Animal):
	def purr(self):
		print("Purr...")

class Dog(Animal):
	def bark(self):
		print("Woof...")
	def hide(self):
		super().hide()
		print("i see you...")

#metodos magicos o dunders (__value__)
#metodo magico para crear una instancia __init__
#ejemplo de metodo magico __add__, que puede ser llamado con el +

class Vector2D:
     def __init__(self,x,y):
             self.x=x
             self.y=y
     def __add__(self,other):
             return Vector2D(self.x+other.x,self.y+other.y)

first = Vector2D(5,7)
second=Vector2D(3,9)
result = first + second
print(result.x) / 8
print(result.y) / 16

#otros metodos magicos -> x+y es igual a x.__add__(y) 
#si el metoro magico no esta miplementado en x entonces x+y es igual a y.__add__(x)
#__sub__ for -
#__mul__ for *
#__truediv__ for /
#__floordiv__ for //
#__mod__ for %
#__pow__ for **
#__and__ for &
#__xor__ for ^
#__or__ for |


class SpecialString:
	def __init__(self, cont):
		self.cont = cont
	def __truediv__(self,other):
		line = "="*len(other.cont)
		return "\n".join([self.cont,line,other.cont])

spam = SpecialString("spam")
hello = SpecialString("Hello world!")
print(spam/hello)

#imprime lo siguiente:
#spam
#============
#Hello world!

#otros de python
__lt__ for <
__le__ for <=
__eq__ for ==
__ne__ for !=
__gt__ for >
__ge__ for >=
#If __ne__ is not implemented, it returns the opposite of __eq__.

class SpecialString:
	def __init__(self, cont):
		self.cont = cont
	def __gt__(self,other):
		for index in range(len(other.cont)+1):
			result = other.cont[:index] + ">" + self.cont
			result += ">" + other.cont[index:]
			print(result)

spam = SpecialString("spam")
eggs = SpecialString("eggs")
spam>eggs

#otros como funciones:
#__len__ for len()
#__getitem__ for indexing
#__setitem__ for assigning to indexed values (x[y]=z)(x.__setitem__(y,z))
#__delitem__ for deleting indexed values
#__iter__ for iteration over objects (e.g., in for loops)
#__contains__ for in
#__call__ for calling objects as functions
#__int__, __str__, and the like, for converting objects to built-in types
